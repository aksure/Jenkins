import os
import pandas as pd
import ssl
from azure.storage.blob import BlobServiceClient

class DownloadADLS:
  def __init__(self, connection_string, container_name):
    service_client = BlobServiceClient.from_connection_string(connection_string, verify="false")
    self.client = service_client.get_container_client(container_name)


  def download(self, source, dest):
    '''
    Download a file or directory to a path on the local filesystem
    '''
    if not dest:
      raise Exception('A destination must be provided')

    blobs = self.ls_files(source, recursive=True)
    if blobs:
      # if source is a directory, dest must also be a directory
      if not source == '' and not source.endswith('/'):
        source += '/'
      if not dest.endswith('/'):
        dest += '/'
      # append the directory name from source to the destination
      dest += os.path.basename(os.path.normpath(source)) + '/'

      blobs = [source + blob for blob in blobs]
      for blob in blobs:
        blob_dest = dest + os.path.relpath(blob, source)
        if blob != '2020-11-04 11:59:08/AddressManagement/addressing$mailingaddress':
          self.download_file(blob, blob_dest)
    else:
      if blob != '2020-11-04 11:59:08/AddressManagement/addressing$mailingaddress':
        self.download_file(source, dest)

  def download_file(self, source, dest):
    '''
    Download a single file to a path on the local filesystem
    '''
    # dest is a directory if ending with '/' or '.', otherwise it's a file
    if dest.endswith('.'):
      dest += '/'
    blob_dest = dest + os.path.basename(source) if dest.endswith('/') else dest

    print(f'Downloading {source} to {blob_dest}')
    os.makedirs(os.path.dirname(blob_dest), exist_ok=True)
    bc = self.client.get_blob_client(blob=source)
    #if source == 'testdata1':
    with open(blob_dest, 'wb') as file:
      data = bc.download_blob()
      file.write(data.readall())

  def ls_files(self, path, recursive=False):
    '''
    List files under a path, optionally recursively
    '''
    if not path == '' and not path.endswith('/'):
      path += '/'

    blob_iter = self.client.list_blobs(name_starts_with=path)
    files = []
    for blob in blob_iter:
      relative_path = os.path.relpath(blob.name, path)
      if recursive or not '/' in relative_path:
        files.append(relative_path)
    return files

  def ls_dirs(self, path, recursive=False):
    '''
    List directories under a path, optionally recursively
    '''
    if not path == '' and not path.endswith('/'):
      path += '/'

    blob_iter = self.client.list_blobs(name_starts_with=path)
    dirs = []
    for blob in blob_iter:
      relative_dir = os.path.dirname(os.path.relpath(blob.name, path))
      if relative_dir and (recursive or not '/' in relative_dir) and not relative_dir in dirs:
        dirs.append(relative_dir)
    return dirs

if __name__ == '__main__':
  CONNECTION_STRING = "DefaultEndpointsProtocol=https;AccountName=dlsacdodh001;AccountKey=9vE1msSnTYBHJ/YF5nMET+L7CCEidl3RV1HgBkidSFGyXpDnNKiaBso4HBQTqWpHmHHrkY0A9MxEq4uXfr7P/A==;EndpointSuffix=core.windows.net"
  CONTAINER_NAME = "r4b"
  client = DownloadADLS(CONNECTION_STRING, CONTAINER_NAME)
  client.download(source="2020-11-04 11:59:08/AddressManagement", dest="Download_files")

 
  #df = pd.read_parquet(os.path.join('Download_files/Adress', 'testdata1') , engine='fastparquet', columns=['FirstName','_acdaid'])
  df = pd.read_parquet(os.path.join('Download_files/AddressManagement', 'testdata1') , engine='fastparquet')
  print(df)
  # df = pd.read_parquet(os.path.join('Download_files/Adress', 'testdata2') , engine='fastparquet')
  # print(df)
  # df = pd.read_parquet(os.path.join('Download_files/Adress', 'testdata3') , engine='fastparquet')
  # print(df)
  # df = pd.read_parquet(os.path.join('Download_files/Adress', 'testdata4') , engine='fastparquet')
  # print(df)
  # df = pd.read_parquet(os.path.join('Download_files/Adress', 'testdata6') , engine='fastparquet')
  # print(df)
